---
interface Props {
  title: string;
}


const { title } = Astro.props;
const ttitle = title;
---

<header class=`top-bar-${title}` data-title=`${title}`>
  <span></span>
  <p id="title">{title}</p>
  <button id=`close-${title}`>
    <span>X</span>
    </button>
</header>

<style>
  header {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: .5rem .5rem;
    background-color: var(--bg-black);
    cursor: move;
    border-radius: 15px 15px 0 0;
  }
  p {
    color:var(--white);
    font-size: 1rem;
    margin: 0;
  }
  button{
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bg-gray-dark);
    border: none;
    border-radius: 50%;
    width: 18px;
    height: 18px;
    cursor: pointer;
  }

  span{
    width: 2ch;
    color: var(--white);
    font-size: .5rem;
    font-weight: bold;
  }
</style>

<script define:vars={{ttitle}}>
  const $topBar = document.querySelector(`.top-bar-${ttitle}`);
  const dragDiv = document.querySelector(`.window-${ttitle}`);

  
  let isDragging = false;
  let offsetX = 0;
  let offsetY = 0;

  // Agrega un evento al div para iniciar el arrastre
  $topBar.addEventListener("mousedown", (e) => {
    isDragging = true;
    offsetX = e.clientX - (dragDiv.getBoundingClientRect().left || 0);
    offsetY = e.clientY - (dragDiv.getBoundingClientRect().top || 0);
  });

  // Agrega un evento al documento para continuar el arrastre
  document.addEventListener("mousemove", (e) => {
    if (isDragging) {
      if (dragDiv) {
        dragDiv.style.left = e.clientX - offsetX + "px";
        dragDiv.style.top = e.clientY - offsetY + "px";
      }
    }
  });

  // Agrega un evento al documento para finalizar el arrastre
  document.addEventListener("mouseup", () => {
    isDragging = false;
  });
</script>
