---
import { auth } from "../lib/lucia";
import { LuciaError } from "lucia";
import type { APIRoute } from "astro";
import Logo from "../components/Logo.astro";
import TopBar from "../components/TopBar.astro";
import Layout from "../layouts/Layout.astro";

let errorMessage: string | null = null;
let usernameInput = "";

// check for form submissions

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const username = formData.get("username");
  const password = formData.get("password");
  const passwordRepeat = formData.get("password-repeat");

  // basic check
  if (typeof username === "string") {
    usernameInput = username;
  }
  const validUsername =
    typeof username === "string" &&
    username.length >= 4 &&
    username.length <= 31;
  const validPassword =
    typeof password === "string" &&
    password.length >= 6 &&
    password.length <= 255;
	password === passwordRepeat;
  if (validUsername && validPassword) {
    try {
      const user = await auth.createUser({
        key: {
          providerId: "username", // auth method
          providerUserId: username.toLowerCase(), // unique id when using "username" auth method
          password, // hashed by Lucia
        },
        attributes: {
          username,
        },
      });
      const session = await auth.createSession({
        userId: user.userId,
        attributes: {},
      });
      Astro.locals.auth.setSession(session); // set session cookie
      return Astro.redirect("/main", 302); // redirect to profile page
    } catch (e) {
      // this part depends on the database you're using
      // check for unique constraint error in user table
      if (e instanceof LuciaError) {
        // user does not exist
        // or invalid password
        errorMessage = "Usuario o contraseñas invalidas";
        Astro.response.status = 400;
      } else {
        errorMessage = e;
        Astro.response.status = 500;
      }
    }
  } else {
    errorMessage = "Invalid input";
    Astro.response.status = 400;
  }

  const session = await Astro.locals.auth.validate();
  if (session) return Astro.redirect("/main", 302); // redirect to profile page
}
---

<Layout title="Sign up">
  <main>
    <TopBar />
    <section class="signin">
      <i class="fa-solid fa-user"></i>
      <form method="post">
        <label for="username">Usuario</label>
        <input name="username" id="username" />
        <label for="password">Constraseña</label>
        <input type="password" name="password" id="password" />
        <label for="password-repeat">Repita constraseña</label>
        <input type="password" name="password-repeat" id="password-repeat" />
        <p id="error-message">{errorMessage}</p>
        <input type="submit" value="Ingresar" />
      </form>
      <p>
        ¿Ya tienes una cuenta?
        <a href="/login">Inicia Sesión</a>
      </p>
    </section>
    <section class="logo">
      <Logo width={30} height={30} />
    </section>
  </main>
</Layout>

<style>
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-evenly;
    background-color: var(--bg-black);
    width: 100%;
    height: 100vh;
    animation: appear 0.5s;
  }
  .signin {
    display: flex;
    width: 300px;
    height: auto;
    border-radius: 10px;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
  }
  i {
    font-size: 6rem;
    color: var(--white);
    margin-bottom: 2rem;
  }
  .signin > form {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
	width: 100%;
  }
  #username,
  #password,
  #password-repeat {
    background: transparent;
    background-color: var(--bg-green-transparent);
    border: 0;
    border-radius: 4px;
    color: var(--white);
    font-size: 1rem;
    padding: 0.4rem 0.5rem;
	width: 100%;
  }

  label {
    color: var(--white);
  }

  #error-message {
    margin-top: 1rem;
    color: red;
    text-align: center;
    font-size: 0.8rem;
  }

  input[type="submit"] {
    background-color: var(--bg-green-transparent);
    border: 0;
    padding: 0.8rem 1.5rem;
    margin: 1rem 0;
    border-radius: 5px;
    cursor: pointer;
    color: var(--white);
    font-weight: bold;
    align-self: center;
    transition: all 0.3s ease;
  }
  input[type="submit"]:hover {
    background-color: var(--bg-green);
    color: var(--bg-black-terminal);
  }

  p {
    font-size: 0.8rem;
    color: var(--white);
  }
  a {
    color: inherit;
  }
  a:hover {
    color: var(--bg-green);
  }

  .logo {
    position: absolute;
    bottom: 0;
  }

  @keyframes appear {
    from {
      opacity: 0;
    }
  }
</style>
